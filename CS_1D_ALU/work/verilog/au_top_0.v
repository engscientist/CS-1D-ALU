/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_bool_c;
  reg [6-1:0] M_bool_alufn;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  boole_1 bool (
    .alufn(M_bool_alufn),
    .a(M_bool_a),
    .b(M_bool_b),
    .c(M_bool_c)
  );
  
  wire [16-1:0] M_shif_c;
  reg [6-1:0] M_shif_alufn;
  reg [16-1:0] M_shif_a;
  reg [4-1:0] M_shif_b;
  shift_2 shif (
    .alufn(M_shif_alufn),
    .a(M_shif_a),
    .b(M_shif_b),
    .c(M_shif_c)
  );
  
  wire [1-1:0] M_arith_z;
  wire [1-1:0] M_arith_v;
  wire [1-1:0] M_arith_n;
  wire [16-1:0] M_arith_op;
  reg [16-1:0] M_arith_a;
  reg [16-1:0] M_arith_b;
  reg [6-1:0] M_arith_alufn;
  arithmetic_3 arith (
    .a(M_arith_a),
    .b(M_arith_b),
    .alufn(M_arith_alufn),
    .z(M_arith_z),
    .v(M_arith_v),
    .n(M_arith_n),
    .op(M_arith_op)
  );
  
  wire [16-1:0] M_comp_cmp;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_n;
  reg [1-1:0] M_comp_v;
  reg [6-1:0] M_comp_alufn;
  compare_4 comp (
    .z(M_comp_z),
    .n(M_comp_n),
    .v(M_comp_v),
    .alufn(M_comp_alufn),
    .cmp(M_comp_cmp)
  );
  
  wire [1-1:0] M_comparith_z;
  wire [1-1:0] M_comparith_v;
  wire [1-1:0] M_comparith_n;
  wire [16-1:0] M_comparith_op;
  reg [16-1:0] M_comparith_a;
  reg [16-1:0] M_comparith_b;
  reg [6-1:0] M_comparith_alufn;
  arithmetic_3 comparith (
    .a(M_comparith_a),
    .b(M_comparith_b),
    .alufn(M_comparith_alufn),
    .z(M_comparith_z),
    .v(M_comparith_v),
    .n(M_comparith_n),
    .op(M_comparith_op)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [16-1:0] M_storA_out;
  reg [1-1:0] M_storA_rst;
  reg [1-1:0] M_storA_stcom;
  reg [16-1:0] M_storA_inp;
  store16_6 storA (
    .clk(clk),
    .rst(M_storA_rst),
    .stcom(M_storA_stcom),
    .inp(M_storA_inp),
    .out(M_storA_out)
  );
  wire [16-1:0] M_storB_out;
  reg [1-1:0] M_storB_rst;
  reg [1-1:0] M_storB_stcom;
  reg [16-1:0] M_storB_inp;
  store16_6 storB (
    .clk(clk),
    .rst(M_storB_rst),
    .stcom(M_storB_stcom),
    .inp(M_storB_inp),
    .out(M_storB_out)
  );
  wire [16-1:0] M_storC_out;
  reg [1-1:0] M_storC_rst;
  reg [1-1:0] M_storC_stcom;
  reg [16-1:0] M_storC_inp;
  store16_6 storC (
    .clk(clk),
    .rst(M_storC_rst),
    .stcom(M_storC_stcom),
    .inp(M_storC_inp),
    .out(M_storC_out)
  );
  
  reg [5:0] alufn;
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    alufn = io_dip[16+0+5-:6];
    M_storA_rst = rst;
    M_storB_rst = rst;
    M_storC_rst = rst;
    M_storA_stcom = io_button[3+0-:1];
    M_storB_stcom = io_button[4+0-:1];
    M_storC_stcom = io_button[1+0-:1];
    M_storA_inp = {io_dip[8+0+7-:8], io_dip[0+0+7-:8]};
    M_storB_inp = {io_dip[8+0+7-:8], io_dip[0+0+7-:8]};
    M_storC_inp = 16'h0000;
    M_bool_a = M_storA_out;
    M_bool_b = M_storB_out;
    M_bool_alufn = alufn;
    M_shif_a = M_storA_out;
    M_shif_b = M_storB_out[0+3-:4];
    M_shif_alufn = alufn;
    M_arith_a = M_storA_out;
    M_arith_b = M_storB_out;
    M_arith_alufn = alufn;
    M_comparith_a = M_storA_out;
    M_comparith_b = M_storB_out;
    M_comparith_alufn = 6'h01;
    M_comp_v = M_comparith_v;
    M_comp_z = M_comparith_z;
    M_comp_n = M_comparith_n;
    M_comp_alufn = alufn;
    
    case (alufn[5+0-:1])
      1'h0: begin
        
        case (alufn[4+0-:1])
          1'h0: begin
            M_storC_inp = M_arith_op;
            io_led[8+0+7-:8] = M_storC_out[8+7-:8];
            io_led[0+0+7-:8] = M_storC_out[0+7-:8];
          end
          1'h1: begin
            M_storC_inp = M_bool_c;
            io_led[8+0+7-:8] = M_storC_out[8+7-:8];
            io_led[0+0+7-:8] = M_storC_out[0+7-:8];
          end
        endcase
      end
      1'h1: begin
        
        case (alufn[4+0-:1])
          1'h0: begin
            M_storC_inp = M_shif_c;
            io_led[8+0+7-:8] = M_storC_out[8+7-:8];
            io_led[0+0+7-:8] = M_storC_out[0+7-:8];
          end
          1'h1: begin
            M_storC_inp = M_comp_cmp;
            io_led[8+0+7-:8] = M_storC_out[8+7-:8];
            io_led[0+0+7-:8] = M_storC_out[0+7-:8];
          end
        endcase
      end
    endcase
  end
endmodule
